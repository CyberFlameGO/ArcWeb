'use strict'; // code generated by pbf v3.2.1

// Profile ========================================

const Profile = exports.Profile = {};

Profile.read = function (pbf, end) {
    return pbf.readFields(Profile._readField, {profiler: null, info: null}, end);
};
Profile._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.profiler = Profile.Profiler.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.info = Profile.Info.read(pbf, pbf.readVarint() + pbf.pos);
};

// Profile.Profiler ========================================

Profile.Profiler = {};

Profile.Profiler.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler._readField, {cpu: null, memory: null}, end);
};
Profile.Profiler._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.cpu = Profile.Profiler.CPU.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.memory = Profile.Profiler.Memory.read(pbf, pbf.readVarint() + pbf.pos);
};

// Profile.Profiler.CPU ========================================

Profile.Profiler.CPU = {};

Profile.Profiler.CPU.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler.CPU._readField, {threads: []}, end);
};
Profile.Profiler.CPU._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.threads.push(Profile.Profiler.CPU.Thread.read(pbf, pbf.readVarint() + pbf.pos));
};

// Profile.Profiler.CPU.Thread ========================================

Profile.Profiler.CPU.Thread = {};

Profile.Profiler.CPU.Thread.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler.CPU.Thread._readField, {name: "", time: 0, children: []}, end);
};
Profile.Profiler.CPU.Thread._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.time = pbf.readVarint();
    else if (tag === 3) obj.children.push(Profile.Profiler.CPU.Thread.Children.read(pbf, pbf.readVarint() + pbf.pos));
};

// Profile.Profiler.CPU.Thread.Children ========================================

Profile.Profiler.CPU.Thread.Children = {};

Profile.Profiler.CPU.Thread.Children.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler.CPU.Thread.Children._readField, {class: "", method: "", time: 0, children: []}, end);
};
Profile.Profiler.CPU.Thread.Children._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.class = pbf.readString();
    else if (tag === 2) obj.method = pbf.readString();
    else if (tag === 3) obj.time = pbf.readVarint();
    else if (tag === 4) obj.children.push(Profile.Profiler.CPU.Thread.Children.read(pbf, pbf.readVarint() + pbf.pos));
};

// Profile.Profiler.Memory ========================================

Profile.Profiler.Memory = {};

Profile.Profiler.Memory.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler.Memory._readField, {debug_symbols: false, threads: []}, end);
};
Profile.Profiler.Memory._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.debug_symbols = pbf.readBoolean();
    else if (tag === 2) obj.threads.push(Profile.Profiler.Memory.Thread.read(pbf, pbf.readVarint() + pbf.pos));
};

// Profile.Profiler.Memory.Thread ========================================

Profile.Profiler.Memory.Thread = {};

Profile.Profiler.Memory.Thread.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler.Memory.Thread._readField, {name: "", time: 0, children: []}, end);
};
Profile.Profiler.Memory.Thread._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.time = pbf.readVarint();
    else if (tag === 3) obj.children.push(Profile.Profiler.Memory.Thread.Children.read(pbf, pbf.readVarint() + pbf.pos));
};

// Profile.Profiler.Memory.Thread.Children ========================================

Profile.Profiler.Memory.Thread.Children = {};

Profile.Profiler.Memory.Thread.Children.read = function (pbf, end) {
    return pbf.readFields(Profile.Profiler.Memory.Thread.Children._readField, {class: "", method: "", bytes: 0, children: []}, end);
};
Profile.Profiler.Memory.Thread.Children._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.class = pbf.readString();
    else if (tag === 2) obj.method = pbf.readString();
    else if (tag === 3) obj.bytes = pbf.readVarint();
    else if (tag === 4) obj.children.push(Profile.Profiler.Memory.Thread.Children.read(pbf, pbf.readVarint() + pbf.pos));
};

// Profile.Info ========================================

Profile.Info = {};

Profile.Info.read = function (pbf, end) {
    return pbf.readFields(Profile.Info._readField, {system: null, server: null, java: null}, end);
};
Profile.Info._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.system = Profile.Info.System.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.server = Profile.Info.Server.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.java = Profile.Info.Java.read(pbf, pbf.readVarint() + pbf.pos);
};

// Profile.Info.System ========================================

Profile.Info.System = {};

Profile.Info.System.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.System._readField, {cpu: null, memory: null, os: null}, end);
};
Profile.Info.System._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.cpu = Profile.Info.System.CPU.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.memory = Profile.Info.System.Memory.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.os = Profile.Info.System.OS.read(pbf, pbf.readVarint() + pbf.pos);
};

// Profile.Info.System.CPU ========================================

Profile.Info.System.CPU = {};

Profile.Info.System.CPU.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.System.CPU._readField, {model: "", cores: 0, threads: 0, frequency: 0}, end);
};
Profile.Info.System.CPU._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.model = pbf.readString();
    else if (tag === 2) obj.cores = pbf.readVarint();
    else if (tag === 3) obj.threads = pbf.readVarint();
    else if (tag === 4) obj.frequency = pbf.readVarint();
};

// Profile.Info.System.Memory ========================================

Profile.Info.System.Memory = {};

Profile.Info.System.Memory.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.System.Memory._readField, {physical: 0, swap: 0, virtual: 0}, end);
};
Profile.Info.System.Memory._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.physical = pbf.readVarint();
    else if (tag === 2) obj.swap = pbf.readVarint();
    else if (tag === 3) obj.virtual = pbf.readVarint();
};

// Profile.Info.System.OS ========================================

Profile.Info.System.OS = {};

Profile.Info.System.OS.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.System.OS._readField, {manufacturer: "", family: "", version: "", bitness: 0}, end);
};
Profile.Info.System.OS._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.manufacturer = pbf.readString();
    else if (tag === 2) obj.family = pbf.readString();
    else if (tag === 3) obj.version = pbf.readString();
    else if (tag === 4) obj.bitness = pbf.readVarint();
};

// Profile.Info.Server ========================================

Profile.Info.Server = {};

Profile.Info.Server.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.Server._readField, {uptime: 0, version: "", online_mode: 0, gcs: [], configs: [], plugins: []}, end);
};
Profile.Info.Server._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.uptime = pbf.readVarint();
    else if (tag === 2) obj.version = pbf.readString();
    else if (tag === 3) obj.online_mode = pbf.readVarint();
    else if (tag === 4) obj.gcs.push(Profile.Info.Server.GC.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.configs.push(Profile.Info.Server.Config.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.plugins.push(Profile.Info.Server.Plugin.read(pbf, pbf.readVarint() + pbf.pos));
};

Profile.Info.Server.OnlineMode = {
    "ENABLED": {
        "value": 0,
        "options": {}
    },
    "DISABLED": {
        "value": 1,
        "options": {}
    },
    "BUNGEE": {
        "value": 2,
        "options": {}
    },
    "VELOCITY": {
        "value": 3,
        "options": {}
    }
};

// Profile.Info.Server.Config ========================================

Profile.Info.Server.Config = {};

Profile.Info.Server.Config.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.Server.Config._readField, {file: "", content: ""}, end);
};
Profile.Info.Server.Config._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file = pbf.readString();
    else if (tag === 2) obj.content = pbf.readString();
};

// Profile.Info.Server.Plugin ========================================

Profile.Info.Server.Plugin = {};

Profile.Info.Server.Plugin.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.Server.Plugin._readField, {name: "", version: "", author: ""}, end);
};
Profile.Info.Server.Plugin._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.version = pbf.readString();
    else if (tag === 3) obj.author = pbf.readString();
};

// Profile.Info.Server.GC ========================================

Profile.Info.Server.GC = {};

Profile.Info.Server.GC.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.Server.GC._readField, {name: "", total: 0, time: 0, frequency: 0}, end);
};
Profile.Info.Server.GC._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.total = pbf.readVarint();
    else if (tag === 3) obj.time = pbf.readDouble();
    else if (tag === 4) obj.frequency = pbf.readVarint();
};

// Profile.Info.Java ========================================

Profile.Info.Java = {};

Profile.Info.Java.read = function (pbf, end) {
    return pbf.readFields(Profile.Info.Java._readField, {version: "", vendor: "", vm: "", runtime_name: "", runtime_version: "", flags: []}, end);
};
Profile.Info.Java._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.version = pbf.readString();
    else if (tag === 2) obj.vendor = pbf.readString();
    else if (tag === 3) obj.vm = pbf.readString();
    else if (tag === 4) obj.runtime_name = pbf.readString();
    else if (tag === 5) obj.runtime_version = pbf.readString();
    else if (tag === 6) obj.flags.push(pbf.readString());
};
